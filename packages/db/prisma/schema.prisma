generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  githubId    String    @unique
  username    String
  email       String
  image       String
  activeRepos Int       @default(0)
  planId      String
  plan        Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  repos       Repo[]
  payments    Payment[]
}

enum ExistingPlan {
  FREE
  PRO
  ENTERPRISE
}

model Plan {
  id          String       @id @default(cuid())
  name        ExistingPlan @unique @default(FREE)
  price       Float?
  maxRepos    Int
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  payments    Payment[]
}

model Payment {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    String
  amount    Int
  planId    String
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Repo {
  id              String         @id @default(cuid())
  repoId          String         @unique
  repoName        String
  repoFullName    String
  repoURL         String
  languages       String[]
  installationId  String
  isActive        Boolean        @default(false)
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  repoConfig      RepoConfig?
  generalConfigId String
  generalConfig   GeneralConfig  @relation(fields: [generalConfigId], references: [id], onDelete: Cascade)
  pathConfigs     PathConfig[]
  labelConfigs    LabelConfig[]
  RepoErrorLog    RepoErrorLog[]
}

enum Tone {
  professional
  casual
  friendly
  humorous
  enthusiastic
  empathetic
  formal
  informal
}

model GeneralConfig {
  id             String   @id @default(cuid())
  tone           Tone     @default(professional)
  enableFreeTier Boolean  @default(true)
  earlyAccess    Boolean  @default(false)
  defaultModel   String?
  maxTokens      Int?
  contextDepth   Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Repo           Repo[]
}

model RepoConfig {
  id                       String   @id @default(cuid())
  repoId                   String   @unique
  repo                     Repo     @relation(fields: [repoId], references: [id], onDelete: Cascade)
  prEnabled                Boolean  @default(true)
  issueEnabled             Boolean  @default(true)
  aiReviewEnabled          Boolean  @default(false)
  highLevelSummaryEnabled  Boolean  @default(true)
  showWalkThrough          Boolean  @default(false)
  abortOnClose             Boolean  @default(true)
  isProgressFortuneEnabled Boolean  @default(false)
  poemEnabled              Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model PathConfig {
  id           String   @id @default(cuid())
  repoId       String
  Repo         Repo     @relation(fields: [repoId], references: [id], onDelete: Cascade)
  importance   Int?
  pathPattern  String
  instructions String?
  enabled      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model LabelConfig {
  id           String   @id @default(cuid())
  repoId       String
  Repo         Repo     @relation(fields: [repoId], references: [id], onDelete: Cascade)
  label        String
  instructions String?
  enabled      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RepoErrorLog {
  id         String   @id @default(cuid())
  repoId     String
  Repo       Repo     @relation(fields: [repoId], references: [id], onDelete: Cascade)
  message    String
  type       String
  number     Int?
  details    String?
  occurredAt DateTime @default(now())
  resolved   Boolean  @default(false)
}
